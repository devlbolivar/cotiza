generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER")
  url      = env("DATABASE_URL")
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  EXPIRED
}

enum QuoteDecision {
  APPROVED
  CHANGES_REQUESTED
  REJECTED
}

enum ReminderType {
  EMAIL
  WHATSAPP
}

enum ActivityType {
  STATUS_CHANGE
  CLIENT_ACTION
  NOTE
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  quotes    Quote[]
  clients   Client[]
  templates Template[]
}

model Client {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name      String
  email     String?
  phone     String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quotes    Quote[]

  @@index([ownerId, name])
}

model Template {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  category    String
  description String?
  items       Json?
  terms       String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quotes      Quote[]

  @@index([ownerId, category])
}

model Quote {
  id              String         @id @default(cuid())
  ownerId         String
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  clientId        String?
  client          Client?        @relation(fields: [clientId], references: [id])
  templateId      String?
  template        Template?      @relation(fields: [templateId], references: [id])
  reference       String         @unique
  title           String
  summary         String?
  status          QuoteStatus    @default(DRAFT)
  decision        QuoteDecision?
  publicSlug      String         @unique
  subtotal        Decimal        @default(0) @db.Decimal(12, 2)
  tax             Decimal        @default(0) @db.Decimal(12, 2)
  total           Decimal        @default(0) @db.Decimal(12, 2)
  currency        String         @default("USD")
  terms           String?
  notes           String?
  sentAt          DateTime?
  viewedAt        DateTime?
  expiresAt       DateTime?
  approvedAt      DateTime?
  decisionName    String?
  decisionEmail   String?
  decisionMessage String?
  decisionAt      DateTime?
  decisionIp      String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  items           QuoteItem[]
  reminders       Reminder[]
  activities      QuoteActivity[]

  @@index([ownerId, status])
  @@index([clientId])
  @@index([publicSlug])
}

model QuoteItem {
  id          String   @id @default(cuid())
  quoteId     String
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  description String
  quantity    Decimal  @default(1) @db.Decimal(10, 2)
  unit        String?
  unitPrice   Decimal  @default(0) @db.Decimal(10, 2)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
}

model Reminder {
  id           String       @id @default(cuid())
  quoteId      String
  quote        Quote        @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  reminderType ReminderType
  runAt        DateTime
  completedAt  DateTime?
  createdAt    DateTime     @default(now())

  @@index([quoteId, runAt])
}

model QuoteActivity {
  id          String       @id @default(cuid())
  quoteId     String
  quote       Quote        @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())

  @@index([quoteId, type])
}
